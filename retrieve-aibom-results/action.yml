name: 'Retrieve AIBOM Results from HiddenLayer'
description: 'Retrieves AI Bill of Materials (AIBOM) in CycloneDX format from HiddenLayer API'
inputs:
  scan-id:
    description: 'Scan ID from HiddenLayer'
    required: true
  client-id:
    description: 'HiddenLayer Client ID'
    required: true
  client-secret:
    description: 'HiddenLayer Client Secret'
    required: true
  auth-url:
    description: 'HiddenLayer Auth URL'
    required: false
    default: 'https://auth.hiddenlayer.ai'
  api-url:
    description: 'HiddenLayer API URL'
    required: false
    default: 'https://api.us.hiddenlayer.ai'
  output-file:
    description: 'Output AIBOM file name'
    required: false
    default: 'aibom.cdx.json'
outputs:
  aibom-file:
    description: 'Path to AIBOM file'
    value: ${{ steps.retrieve.outputs.aibom-file }}
  retrieval-status:
    description: 'Status of retrieval (success or failed)'
    value: ${{ steps.retrieve.outputs.retrieval-status }}

runs:
  using: 'composite'
  steps:
    - name: Authenticate with HiddenLayer
      id: auth
      shell: bash
      env:
        CLIENT_ID: ${{ inputs.client-id }}
        CLIENT_SECRET: ${{ inputs.client-secret }}
        AUTH_URL: ${{ inputs.auth-url }}
      run: |
        echo "::group::Authenticating with HiddenLayer"
        
        # Authenticate and get access token
        auth_response=$(curl -s -X POST \
          "$AUTH_URL/oauth2/token?grant_type=client_credentials" \
          -u "$CLIENT_ID:$CLIENT_SECRET")
        
        # Extract access token
        access_token=$(echo "$auth_response" | jq -r '.access_token')
        
        if [ -z "$access_token" ] || [ "$access_token" == "null" ]; then
          echo "::warning::Failed to authenticate with HiddenLayer for AIBOM retrieval"
          echo "Response: $auth_response"
          echo "retrieval-status=failed" >> $GITHUB_OUTPUT
          exit 0  # Exit gracefully
        fi
        
        echo "✅ Successfully authenticated"
        echo "::add-mask::$access_token"
        echo "access-token=$access_token" >> $GITHUB_OUTPUT
        
        echo "::endgroup::"
    
    - name: Retrieve AIBOM Results
      id: retrieve
      shell: bash
      env:
        SCAN_ID: ${{ inputs.scan-id }}
        API_URL: ${{ inputs.api-url }}
        ACCESS_TOKEN: ${{ steps.auth.outputs.access-token }}
        OUTPUT_FILE: ${{ inputs.output-file }}
      run: |
        echo "::group::Retrieving AIBOM for scan $SCAN_ID"
        
        # Check if authentication was successful
        if [ -z "$ACCESS_TOKEN" ]; then
          echo "::warning::Skipping AIBOM retrieval due to authentication failure"
          echo "retrieval-status=failed" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Retrieve AIBOM in CycloneDX format
        response_code=$(curl -s -w "%{http_code}" -o "$OUTPUT_FILE" \
          -X GET "$API_URL/supply-chain/v3/scans/$SCAN_ID" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Accept: application/vnd.cyclonedx+json")
        
        if [ "$response_code" != "200" ]; then
          echo "::warning::Failed to retrieve AIBOM. HTTP status: $response_code"
          if [ -f "$OUTPUT_FILE" ]; then
            echo "Response body:"
            cat "$OUTPUT_FILE"
            rm "$OUTPUT_FILE"
          fi
          echo "retrieval-status=failed" >> $GITHUB_OUTPUT
          exit 0  # Exit gracefully
        fi
        
        # Validate CycloneDX format
        if jq -e '.bomFormat' "$OUTPUT_FILE" > /dev/null 2>&1; then
          echo "✅ Successfully retrieved AIBOM"
          echo "BOM Format: $(jq -r '.bomFormat' "$OUTPUT_FILE")"
          echo "Spec Version: $(jq -r '.specVersion' "$OUTPUT_FILE")"
          echo "Components: $(jq '.components | length' "$OUTPUT_FILE")"
          echo "aibom-file=$OUTPUT_FILE" >> $GITHUB_OUTPUT
          echo "retrieval-status=success" >> $GITHUB_OUTPUT
        else
          echo "::warning::Retrieved file is not valid CycloneDX format"
          rm -f "$OUTPUT_FILE"
          echo "retrieval-status=failed" >> $GITHUB_OUTPUT
        fi
        
        echo "::endgroup::" 