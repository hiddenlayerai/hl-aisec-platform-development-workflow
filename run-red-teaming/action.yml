name: 'Run Red Teaming Agent'
description: 'Executes HiddenLayer Automated Red Teaming against a target'
inputs:
  target-url:
    description: 'URL of the target endpoint'
    required: true
  model-name:
    description: 'Model name for the attack'
    required: true
  attack-tags:
    description: 'Comma-separated attack category tags'
    required: false
    default: 'quick-start'
  license:
    description: 'HiddenLayer Automated Red Teaming License'
    required: true
  client-id:
    description: 'HiddenLayer Client ID'
    required: true
  client-secret:
    description: 'HiddenLayer Client Secret'
    required: true
  api-url:
    description: 'HiddenLayer API URL'
    required: false
    default: 'https://api.us.hiddenlayer.ai'
  auth-url:
    description: 'HiddenLayer Auth URL'
    required: false
    default: 'https://auth.hiddenlayer.ai'
  console-url:
    description: 'HiddenLayer Console URL'
    required: false
    default: 'https://console.us.hiddenlayer.ai'
  log-level:
    description: 'Log level for the agent'
    required: false
    default: 'info'
  art-image-tag:
    description: 'Red teaming agent Docker image tag'
    required: false
    default: 'latest'
  planned-attempts:
    description: 'Number of planned attempts for each attack (DEFAULT_PLANNED_ATTEMPTS)'
    required: false
    default: '1'
outputs:
  scan-id:
    description: 'Red teaming scan ID'
    value: ${{ steps.run-agent.outputs.scan-id }}
  scan-completed:
    description: 'Whether the scan completed successfully'
    value: ${{ steps.run-agent.outputs.scan-completed }}

runs:
  using: 'composite'
  steps:
    - name: Prepare Attack Configuration
      id: prepare
      shell: bash
      run: |
        echo "::group::Preparing red teaming configuration"
        
        # Convert comma-separated tags to flags
        attack_tags="${{ inputs.attack-tags }}"
        attack_flags=""
        
        if [ -n "$attack_tags" ]; then
          # Split by comma and create flags
          IFS=',' read -ra tags <<< "$attack_tags"
          for tag in "${tags[@]}"; do
            # Trim whitespace
            tag=$(echo "$tag" | xargs)
            attack_flags="$attack_flags --tag=$tag"
          done
        fi
        
        echo "attack-flags=$attack_flags" >> $GITHUB_OUTPUT
        
        echo "ðŸ“‹ Configuration:"
        echo "  Target: ${{ github.repository }}"
        echo "  URL: ${{ inputs.target-url }}"
        echo "  Model: ${{ inputs.model-name }}"
        echo "  Attack Tags: ${{ inputs.attack-tags }}"
        echo "  Attack Flags: $attack_flags"
        echo "  X-Requester-Id: ${{ github.actor }}"
        
        echo "::endgroup::"
    
    - name: Run Red Teaming Agent
      id: run-agent
      shell: bash
      env:
        TARGET_URL: ${{ inputs.target-url }}
        MODEL_NAME: ${{ inputs.model-name }}
        ATTACK_TAGS: ${{ inputs.attack-tags }}
        HL_LICENSE: ${{ inputs.license }}
        HL_ART_AGENT_AUTH_CLIENT_ID: ${{ inputs.client-id }}
        HL_ART_AGENT_AUTH_CLIENT_SECRET: ${{ inputs.client-secret }}
        HL_ART_AGENT_AUTH_URL: ${{ inputs.auth-url }}
        HL_ART_AGENT_ART_OPS_URL: ${{ inputs.api-url }}
        HL_ART_AGENT_REPORT_URL: ${{ inputs.console-url }}
        HL_ART_AGENT_LOG_LEVEL: ${{ inputs.log-level }}
        HL_LLM_PROXY_CLIENT_SECRET: ${{ inputs.client-secret }}
        HL_LLM_PROXY_MLDR_BASE_URL: ${{ inputs.api-url }}
        HL_LLM_PROXY_TOKEN_URL: ${{ inputs.auth-url }}
        DEFAULT_PLANNED_ATTEMPTS: ${{ inputs.planned-attempts }}
      run: |
        echo "::group::Running Automated Red Teaming with HiddenLayer"
        
        # Display configuration
        echo "Model Name: $MODEL_NAME"
        echo "Attack Tags: $ATTACK_TAGS"
        echo $TARGET_URL | sed -E 's|://[^@]*@|://<credentials>@|g; s|:[^/]*@|:<credentials>@|g'
        echo "Planned Attempts: $DEFAULT_PLANNED_ATTEMPTS"
        echo "X-Requester-Id: ${{ github.actor }}"
        echo "API URL: $HL_LLM_PROXY_MLDR_BASE_URL"
        echo "Console URL: $HL_ART_AGENT_REPORT_URL"
        
        # Build command
        cmd="docker run --rm \
          -e TARGET_URL=\"$TARGET_URL\" \
          -e MODEL_NAME=\"$MODEL_NAME\" \
          -e ATTACK_TAGS=\"$ATTACK_TAGS\" \
          -e HL_LICENSE=\"$HL_LICENSE\" \
          -e HL_ART_AGENT_AUTH_CLIENT_ID=\"$HL_ART_AGENT_AUTH_CLIENT_ID\" \
          -e HL_ART_AGENT_AUTH_CLIENT_SECRET=\"$HL_ART_AGENT_AUTH_CLIENT_SECRET\" \
          -e HL_ART_AGENT_AUTH_URL=\"$HL_ART_AGENT_AUTH_URL\" \
          -e HL_ART_AGENT_ART_OPS_URL=\"$HL_ART_AGENT_ART_OPS_URL\" \
          -e HL_ART_AGENT_REPORT_URL=\"$HL_ART_AGENT_REPORT_URL\" \
          -e HL_ART_AGENT_LOG_LEVEL=\"$HL_ART_AGENT_LOG_LEVEL\" \
          -e DEFAULT_PLANNED_ATTEMPTS=\"$DEFAULT_PLANNED_ATTEMPTS\" \
          --network=host \
          quay.io/hiddenlayer/distro-enterprise-automated-red-teaming-for-ai:${{ inputs.art-image-tag }} \
          scan \
          --target=\"${{ github.repository }}\" \
          --url=\"$TARGET_URL\" \
          ${{ steps.prepare.outputs.attack-flags }} \
          --model=\"$MODEL_NAME\" \
          --header=\"X-Requester-Id:${{ github.actor }}\""
        
        # Run the agent and capture output
        output_file="art_output_$$.txt"
        
        eval "$cmd" 2>&1 | tee "$output_file"
        
        exit_code=${PIPESTATUS[0]}
        
        # Extract scan ID from output
        scan_id=""
        if grep -q "search=" "$output_file"; then
          scan_id=$(grep -o "search=[a-f0-9-]*" "$output_file" | awk -F'=' '{print $2}' | head -1)
        fi
        
        # Clean up
        rm -f "$output_file"
        
        if [ -n "$scan_id" ]; then
          echo "scan-id=$scan_id" >> $GITHUB_OUTPUT
          echo "scan-completed=true" >> $GITHUB_OUTPUT
          echo "::notice title=Red Teaming Scan::Scan ID: $scan_id"
          echo "::notice title=View Results::${{ inputs.console-url }}/automated-red-teaming?activeTab=reports&target_name=${{ github.repository }}"
        else
          echo "scan-id=" >> $GITHUB_OUTPUT
          echo "scan-completed=false" >> $GITHUB_OUTPUT
          echo "::warning::Could not extract scan ID from agent output"
        fi
        
        if [ $exit_code -ne 0 ]; then
          echo "::error::Red teaming agent exited with code $exit_code"
          exit $exit_code
        fi
        
        echo "::endgroup::"
    
    - name: Validate Scan
      shell: bash
      run: |
        if [ "${{ steps.run-agent.outputs.scan-completed }}" != "true" ]; then
          echo "::warning::Red teaming scan may not have completed successfully"
        else
          echo "âœ… Red teaming scan completed: ${{ steps.run-agent.outputs.scan-id }}"
        fi 